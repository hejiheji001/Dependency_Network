package util;

import Entities.*;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Created by FireAwayH on 12/07/2016.
 */
public class GraphGenerator {

    public static String[] stocks = {"3In", "Aa", "Aal", "Abf", "Aca", "Adm", "Adn", "Agk", "Agr", "Aht", "Ald"};

    public static void main(String[] args) {
        Date d = new Date();
        String X;
        String Y;
//        String Z;
        int index = 0;

        for(int i = 0; i < StockList.stocks.length; i++){
            X = StockList.stocks[i];
            for (int k = 0; k < StockList.stocks.length; k++){
                Y = StockList.stocks[k];
                if(!X.equals(Y)){
                    ++index;
                    if(index > 0) {
//                        System.out.print(index + " #" + "X = " + X + " Y = " + Y + " ");
                        PCTN_Extend(X, Y);
                    }
                }
            }
        }

        Date dd = new Date();
        System.out.print(dd.getTime() - d.getTime());
        System.exit(0);
    }

    private static void PCTN_Extend(String X, String Y) {
        List rs;
        Session session = HibernateUtil.getSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            double d = (Double)session.createQuery("select avg(xyz) + 2 * stddev(xyz) from Entity_PartialCorrelation where x=:X and y=:Y").setParameter("X", X).setParameter("Y", Y).uniqueResult();
            rs = session.createQuery("select z from Entity_PartialCorrelation where x=:X and y=:Y and xyz>:innerSelect").setParameter("X", X).setParameter("Y", Y).setParameter("innerSelect", d).list();
//            System.out.println(d);

            final List<String> finalStk = new ArrayList<>();
            rs.forEach(r -> {
                Entity_Pctn pk = new Entity_Pctn();
                pk.setSource(r.toString());
                pk.setTargetX(X);
                pk.setTargetY(Y);
                finalStk.add(X);
                finalStk.add(Y);
                finalStk.add(r.toString());
                session.saveOrUpdate(pk);
            });


            finalStk.stream().distinct().forEach(s -> {
                Entity_Stocksinpctn sp = new Entity_Stocksinpctn();
                sp.setName(s);
                session.saveOrUpdate(sp);
            });

            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            throw e;
        } finally {
            session.close();
        }
    }



    @Deprecated()
    private static boolean PCTN(String X, String Y, String Z) {
        boolean result = false;

        Entity_PartialCorrelationPK key = new Entity_PartialCorrelationPK();
        key.setX(X);
        key.setY(Y);
        key.setZ(Z);

        Object rs;
        double d;
        double meanplus2sd;
//        double mean;
//        double sd;

        Session session = HibernateUtil.getSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            Entity_PartialCorrelation entity = (Entity_PartialCorrelation) session.get(Entity_PartialCorrelation.class, key);
            d = entity.getXyz();

            rs = session.createQuery("select avg(xyz) + 2 * stddev(xyz) from Entity_PartialCorrelation where x=:X and y=:Y").setParameter("X", X).setParameter("Y", Y).uniqueResult();
            meanplus2sd = (Double)rs;
//            mean = Double.parseDouble(rs[0].toString());
//            sd = Double.parseDouble(rs[1].toString());

            if (d > meanplus2sd) {
                result = true;

                Entity_PctnPK pk = new Entity_PctnPK();
                pk.setSource(Z);
                pk.setTargetX(X);
                pk.setTargetY(Y);

                try {
                    session.load(Entity_Pctn.class, pk);
                    System.err.println("Exists: Z -> X & Z -> Y: " + Z + " -> " + X + " & " + Z + " -> " + Y);
                }catch (Exception e){
                    Entity_Pctn p = new Entity_Pctn();
                    p.setSource(Z);
                    p.setTargetX(X);
                    p.setTargetY(Y);
                    session.save(p);
                    System.out.println("Z -> X & Z -> Y: " + Z + " -> " + X + " & " + Z + " -> " + Y);
                }
            }

            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            throw e;
        } finally {
            session.close();
        }

        return result;
    }


    public static List getPCTN() {
        List l;
        Session session = HibernateUtil.getSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            l = session.createQuery("from Entity_Pctn").list();
            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            throw e;
        } finally {
            session.close();
        }
        return l;
    }

    public static List getStockInPCTN() {
        List l;
        Session session = HibernateUtil.getSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            l = session.createQuery("select name from Entity_Stocksinpctn order by name").list();
            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            throw e;
        } finally {
            session.close();
        }
        return l;
    }
}
